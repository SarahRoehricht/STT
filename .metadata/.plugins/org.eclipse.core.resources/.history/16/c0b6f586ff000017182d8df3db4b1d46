
				switch (stage) {
				case 0: {
					System.out.println("GSTT");
					
					//establish new Connection for receiving txt
					tcpServer = new TCPServer(gstt.myIP, gstt.myPort, 5, true);
					do {
						message = gstt.tcpServer.receive();
						System.out.println(message);
					} while (!("#STT#1#".equals(message)));
					//end Connection
					gstt.tcpServer.endConnection(); 
					
					if ("#STT#1#".equals(message)) {
						
						System.out.println("started");
						
						if (Datalogger.counter < 50)
							APIKEY = "AIzaSyAtphCcVON9OU-URwD6jjqStwYtBNxK4oY";																
						else if ((Datalogger.counter >= 50) && (Datalogger.counter < 100))
							APIKEY = "AIzaSyB6yR8DR6onz9YEBKkHmrLAOQZth5Vv2gs";
						else if ((Datalogger.counter >= 100) && (Datalogger.counter < 150))
							APIKEY = "AIzaSyCFhY2ogNV4iFX3Hg3EgGU5y9wGodmfLR8";
						else
							APIKEY = "AIzaSyDe2nR4mdQYL74iwkZx5pOBM_3MVHNZS8c";
					}	
					
					Microphone mic = new Microphone(FLACFileWriter.FLAC);
					File file = new File("CRAudioTest.flac");
					
					while (true) {
						try {
							System.out.println("Recording...");
							mic.captureAudioToFile(file); // starts recording
							
							Thread.sleep(1000);// Records for 10s
//							 Path path = Paths.get("good-morning-google.flac");
//							 byte[] data = Files.readAllBytes(path);
							
							//establish new Connection for receiving txt
							tcpServer = new TCPServer(gstt.myIP, gstt.myPort, 5, true);
							do {
								message = gstt.tcpServer.receive();
							} while (!"#STT#0#".equals(message));
							//end connection
							gstt.tcpServer.endConnection();
							
							mic.close();
							System.out.println("Closed mic...");

							byte[] data = Files.readAllBytes(mic.getAudioFile().toPath());
//					
//							mic.getAudioFile().delete();

							String request = "https://www.google.com/speech-api/v2/recognize?client=chromium&lang=en-us&key=" + APIKEY;

							URL url = new URL(request);
							HttpURLConnection connection = (HttpURLConnection) url.openConnection();
							connection.setDoOutput(true);
							connection.setDoInput(true);
							connection.setInstanceFollowRedirects(false);
							connection.setRequestMethod("POST");
							connection.setRequestProperty("Content-Type", "audio/x-flac; rate=8000"); //8000 (from Mic), 44100, 16000
							connection.setRequestProperty("User-Agent", "speech2text");
							connection.setConnectTimeout(60000);
							connection.setUseCaches(false);

							DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
							wr.write(data);
							wr.flush();
							wr.close();
							connection.disconnect();

							System.out.println("Retrieving results...");

							BufferedReader in = new BufferedReader(
									new InputStreamReader(connection.getInputStream()));
							
							String decodedString;
							List<String> ls = new ArrayList<String>();

							while ((decodedString = in.readLine()) != null) {
								ls.add(decodedString);
								System.out.println(decodedString);
							}

							try {
								logData.writeData(ls);
							} catch (IOException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}

							reply = logData.getFirstResponse();
							
							if (reply == null) {
								System.out.println("I can't hear what you said. Please repeat.\n");
								toBeSent = " ";
							} else {
								beforeFirstComma = reply.split("\"")[0];
								toBeSent = beforeFirstComma;
							}
							if (toBeSent == " "){
								
								System.out.println("You said: Nothing" + "\n");
								
								//establish new Connection for sending txt
								tcpServer = new TCPServer(gstt.myIP, gstt.myPort, 5, true);
								gstt.tcpServer.send("You said: Nothing");
								//end Connection
								gstt.tcpServer.endConnection();	
								
							} else if (toBeSent != null) {
								
								toBeSent = "#STT#" + toBeSent + "#";
								System.out.println("You said: " + toBeSent + "\n");
								
								//establish new Connection for sending txt
								tcpServer = new TCPServer(gstt.myIP, gstt.myPort, 5, true);
								gstt.tcpServer.send(toBeSent);
								//end Connection
								gstt.tcpServer.endConnection();
								
								System.out.println("String sent.");
								
								if (!toBeSent.equals("#STT##")) {
									try {
										gstt.log.writeData();
									} catch (IOException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}
						}catch (Exception e) {
							e.printStackTrace();
						}
						break;
					}
					}
					
				}
			