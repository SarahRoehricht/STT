package main;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;

import com.darkprograms.speech.microphone.Microphone;
import com.darkprograms.speech.recognizer.GSpeechDuplex;
import com.darkprograms.speech.recognizer.GSpeechResponseListener;
import com.darkprograms.speech.recognizer.GoogleResponse;

import javaFlacEncoder.FLACFileWriter;

/*GSTT with UDP Receiver and Sender #STT(String)*/

public class GSTT
{

	static String question;
	static int stage = 0;
	static int findName = 0;
	static String toBeSent = "";
	static String beforeFirstComma = "";
	static int pos = 2;

	private UDPConnection udpCom;

	private Datalogger log;

	private InetAddress myIP;
	private int myPort;
	private InetAddress targetIP;
	private int targetPort;

	public GSTT()
	{
		udpCom = new UDPConnection();
		log = new Datalogger();
	}

	public static void main(String[] args)
	{

		if (args.length == 4)
		{
			GSTT gstt = new GSTT();

			String message;

			try
			{
				gstt.myIP = InetAddress.getByName(args[0]);
				gstt.myPort = Integer.parseInt(args[1]);
				gstt.targetIP = InetAddress.getByName(args[2]);
				gstt.targetPort = Integer.parseInt(args[3]);
			} catch (NumberFormatException e1)
			{
				e1.printStackTrace();
			} catch (UnknownHostException e1)
			{
				e1.printStackTrace();
			}

			while (true)
			{
				switch (stage)
				{
				case 0:
				{
					System.out.println("GSTT");
					System.out.println(pos);				    
					if(pos == 0)
					{
						gstt.udpCom.sendSocket("#STT##", gstt.targetIP, gstt.targetPort);
					}
					
					do
					{
						gstt.udpCom.receiveSocket(gstt.myIP, gstt.myPort, false);
						message = gstt.udpCom.getMessage();
						System.out.println(message);
					} while (!("#STT#1#".equals(message)|"#STT#name#".equals(message)));
					
					if("#STT#name#".equals(message))
					{
						findName = 1;
					}
					
					if ("#STT#1#".equals(message)| "#STT#name#".equals(message))
					{
						/* GSpeechDuplex */
						System.out.println("started");
						
						GSpeechDuplex dup = null;
						
						if (Datalogger.counter < 50)
							dup = new GSpeechDuplex("AIzaSyAtphCcVON9OU-URwD6jjqStwYtBNxK4oY");// Instantiate the APIKEY
						else 
							dup = new GSpeechDuplex("AIzaSyAtphCcVON9OU-URwD6jjqStwYtBNxK4oY");

						checkPos_2(pos);
						
						dup.addResponseListener(new GSpeechResponseListener()
						{ // Adds the listener
							public void onResponse(GoogleResponse gr)
							{
								 checkPos_1(pos);
								
								System.out.println("Google thinks you said: " + gr.getResponse());

								System.out.println(
										"with " + ((gr.getConfidence() != null) ? (Double.parseDouble(gr.getConfidence()) * 100) : null) + "% confidence.");
								System.out.println("Google also thinks that you might have said:" + gr.getOtherPossibleResponses());

								question = gr.getResponse();
								
								if(findName == 1)
								{
									Boolean found;
									String[] names = {"Robert", "Mark", "Mac", "Felix", "Matthias", "Leonie", "Onur", "Tobi", "Michelle"};
			
									System.out.println(question);
										for(int i = 0 ; i < names.length; i++)
										{
											found = question.contains(names[i]);
												if(found)
													{
														toBeSent = names[i];
														break;
													}
												else
													{
														toBeSent = "";
													}
										}
								}
								else
								{
									beforeFirstComma = question.split("\"")[0];
									toBeSent = beforeFirstComma;
								}
								
								
								if (toBeSent != null)
								{
									toBeSent = "#STT#" + toBeSent + "#";
									System.out.println("You said: " + toBeSent + "\n");
									gstt.udpCom.sendSocket(toBeSent, gstt.targetIP, gstt.targetPort);
									System.out.println("String sent.");
								} 
//								else
//								{
//									System.out.println("I can't hear what you said.\n");
//									stage = 0;
//								}
								try
								{
									gstt.log.writeData();
								} catch (IOException e)
								{
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}	
						});

						Microphone mic = new Microphone(FLACFileWriter.FLAC);// Instantiate microphone & record FLAC file.

						File file = new File("CRAudioTest.flac");// The File to record buffer

						while (true)
						{
								try
								{
									System.out.println("Recording...");
									mic.captureAudioToFile(file); // starts recording
									//Thread.sleep(10000);// Records for 10s
									do
									{
										gstt.udpCom.receiveSocket(gstt.myIP, gstt.myPort, false);
										message = gstt.udpCom.getMessage();
										System.out.println(message);
									} while (!"#STT#0#".equals(message));
									
									mic.close();// Stops recording
									
									// Sends 10 second voice recording to Google
									byte[] data = Files.readAllBytes(mic.getAudioFile().toPath());// Saves data into memory

									dup.recognize(data, (int) mic.getAudioFormat().getSampleRate());
									mic.getAudioFile().delete();// Deletes buffer file
								} catch (Exception ex)
								{
									ex.printStackTrace();// Prints an error if smthg goes wrong
								}
							break;
						}
					}	
				}
				}
			}
		} else
		{
			System.err.println("Missing arguments!");
		}
	}
	
	public static void checkPos_1(int x)
	{
		x = 1;
	}	
	public static void checkPos_2(int x)
	{
		x = 0;
	}	
}
